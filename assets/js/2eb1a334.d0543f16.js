"use strict";(self.webpackChunkcumulus_ui_library=self.webpackChunkcumulus_ui_library||[]).push([[406],{9508:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"knowledge-base/accessibility","title":"\u267f Accessibility","description":"---","source":"@site/docs/knowledge-base/accessibility.mdx","sourceDirName":"knowledge-base","slug":"/knowledge-base/accessibility","permalink":"/cumulus-ui-library/docs/knowledge-base/accessibility","draft":false,"unlisted":false,"editUrl":"https://github.com/TecDocs/cumulus-ui-library/edit/main/docs/knowledge-base/accessibility.mdx","tags":[],"version":"current","frontMatter":{"id":"accessibility","slug":"/knowledge-base/accessibility","title":"\u267f Accessibility","sidebar_label":"\u267f Accessibility"},"sidebar":"sidebar","previous":{"title":"\u270d\ufe0f Contribution Guide","permalink":"/cumulus-ui-library/docs/knowledge-base/contribution-guide"},"next":{"title":"\ud83d\udcd0 Style Rules","permalink":"/cumulus-ui-library/docs/knowledge-base/style-rules"}}');var t=n(4848),r=n(8453),o=n(3820);const a={id:"accessibility",slug:"/knowledge-base/accessibility",title:"\u267f Accessibility",sidebar_label:"\u267f Accessibility"},l="\u267f Accessibility",c={},d=[{value:"Accessibility as a System Principle",id:"accessibility-as-a-system-principle",level:2},{value:"Contrast, Focus, and Token Responsibility",id:"contrast-focus-and-token-responsibility",level:2},{value:"Component-Level Accessibility Expectations",id:"component-level-accessibility-expectations",level:2},{value:"Recap and What\u2019s Next",id:"recap-and-whats-next",level:2}];function h(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.xc,{children:(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"-accessibility",children:"\u267f Accessibility"})})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(o.Nx,{children:[(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Accessibility is not just a requirement to check off"}),". It is a ",(0,t.jsx)(s.strong,{children:"core responsibility"})," shared across design, engineering, and documentation. At Cumulus, we treat accessibility as a ",(0,t.jsx)(s.strong,{children:"foundational principle"}),", equal in importance to tokens, theming, responsiveness, and scalability."]}),(0,t.jsxs)(s.p,{children:["A component is not truly complete until it functions ",(0,t.jsx)(s.strong,{children:"seamlessly for every user"}),". It must work across devices, with assistive technologies, and through a range of input methods. This section explains how accessibility is built into the foundation of our system and what every contributor must ",(0,t.jsx)(s.strong,{children:"internalize"})," to uphold it."]})]}),"\n",(0,t.jsx)(o.Ow,{children:(0,t.jsxs)(s.p,{children:["Accessibility at Cumulus means ",(0,t.jsx)(s.strong,{children:"inclusive interaction"}),", ",(0,t.jsx)(s.strong,{children:"clear focus management"}),", and ",(0,t.jsx)(s.strong,{children:"sufficient contrast"})," across all themes. It demands that ",(0,t.jsx)(s.strong,{children:"keyboard navigation is smooth"}),", ",(0,t.jsx)(s.strong,{children:"screen reader support is thorough"}),", and all indicators align with our ",(0,t.jsx)(s.strong,{children:"token-driven logic"})," while meeting ",(0,t.jsx)(s.strong,{children:"WCAG standards"}),". When you build with accessibility in mind, you are not only supporting users with disabilities, you are ",(0,t.jsx)(s.strong,{children:"improving clarity, trust, and usability"})," for everyone."]})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"accessibility-as-a-system-principle",children:"Accessibility as a System Principle"}),"\n",(0,t.jsx)(o.Nx,{children:(0,t.jsxs)(s.p,{children:["We do not treat accessibility as an afterthought. We ",(0,t.jsx)(s.strong,{children:"bake it in from the beginning"}),". It is embedded in ",(0,t.jsx)(s.strong,{children:"token definitions"}),", ",(0,t.jsx)(s.strong,{children:"component logic"}),", and ",(0,t.jsx)(s.strong,{children:"documentation patterns"}),". Every contribution represents a shared agreement on inclusivity, covering ",(0,t.jsx)(s.strong,{children:"semantic HTML"}),", ",(0,t.jsx)(s.strong,{children:"ARIA roles"}),", ",(0,t.jsx)(s.strong,{children:"keyboard control"}),", and ",(0,t.jsx)(s.strong,{children:"visible focus"}),". A contribution that cannot be operated or understood by all users cannot be accepted into the system."]})}),"\n",(0,t.jsx)(o.Ow,{children:(0,t.jsxs)(s.p,{children:["Just as tokens provide ",(0,t.jsx)(s.strong,{children:"visual consistency"}),", accessibility ensures ",(0,t.jsx)(s.strong,{children:"behavioral consistency"}),". A tooltip that cannot be reached by keyboard is ",(0,t.jsx)(s.strong,{children:"broken"}),", no matter how well it looks. A button without a visible focus state might still function, but it ",(0,t.jsx)(s.strong,{children:"fails inclusivity expectations"}),". Accessibility binds ",(0,t.jsx)(s.strong,{children:"visual intent"})," to ",(0,t.jsx)(s.strong,{children:"practical usability"}),", creating a system users can trust."]})}),"\n",(0,t.jsx)(o.G,{checks:[{label:"Keyboard navigation works on all interactive elements",pass:!0},{label:"Focus state is visible and token-driven",pass:!0},{label:"ARIA labels used appropriately (not excessively)",pass:!0},{label:"Color contrast meets WCAG 2.1 AA",pass:!0},{label:"No use of outline: none without replacement",pass:!1},{label:"Tooltips and modals are screen-reader accessible",pass:!0}]}),"\n",(0,t.jsx)(o.gU,{children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Figure 1."})," A checklist summarizing accessibility criteria that every component must meet before being merged. Each item prevents costly oversights and reinforces inclusive design."]})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"contrast-focus-and-token-responsibility",children:"Contrast, Focus, and Token Responsibility"}),"\n",(0,t.jsx)(o.Nx,{children:(0,t.jsxs)(s.p,{children:["Every accessible interface begins with ",(0,t.jsx)(s.strong,{children:"visual clarity"}),". If text cannot be read or interactive elements blend into the background, no interaction improvements can compensate. This is why ",(0,t.jsx)(s.strong,{children:"contrast"})," is critical, and why we rely on ",(0,t.jsx)(s.strong,{children:"semantic tokens"})," for all color definitions. Hardcoded values like ",(0,t.jsx)(s.code,{children:"#888"})," or ",(0,t.jsx)(s.code,{children:"#111"})," are never used. Instead, tokens such as ",(0,t.jsx)(s.code,{children:"--color-foreground"})," and ",(0,t.jsx)(s.code,{children:"--color-muted"})," ensure ",(0,t.jsx)(s.strong,{children:"accessible contrast"})," across every theme."]})}),"\n",(0,t.jsx)(o.Ow,{children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Focus management"})," is equally important. Removing outlines without providing an accessible replacement breaks the experience for keyboard users. A proper focus state must be ",(0,t.jsx)(s.strong,{children:"highly visible"}),", ",(0,t.jsx)(s.strong,{children:"adaptable"}),", and ",(0,t.jsx)(s.strong,{children:"driven by tokens"})," so that it remains consistent in light and dark themes. Accessibility does not limit aesthetics, it ensures ",(0,t.jsx)(s.strong,{children:"aesthetics support usability"}),"."]})}),"\n",(0,t.jsx)(o.$X,{fail:{text:"#888",bg:"#fff",label:"Low Contrast"},pass:{text:"var(--color-foreground)",bg:"var(--color-surface)",label:"Token-Based Contrast"}}),"\n",(0,t.jsx)(o.gU,{children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Figure 2."})," A comparison of hardcoded contrast versus token-based contrast. Token-driven styles adapt to themes and guarantee WCAG compliance."]})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"component-level-accessibility-expectations",children:"Component-Level Accessibility Expectations"}),"\n",(0,t.jsx)(o.Nx,{children:(0,t.jsxs)(s.p,{children:["All components must follow accessibility ",(0,t.jsx)(s.strong,{children:"patterns that guarantee reliability"})," across devices and input methods. ",(0,t.jsx)(s.strong,{children:"Buttons"})," require accessible labels and visible focus states. ",(0,t.jsx)(s.strong,{children:"Inputs"})," must be operable via screen readers and provide clear validation messaging. ",(0,t.jsx)(s.strong,{children:"Tooltips"})," cannot rely solely on hover. These are not suggestions, they are ",(0,t.jsx)(s.strong,{children:"non\u2011negotiable standards"}),"."]})}),"\n",(0,t.jsx)(o.Ow,{children:(0,t.jsxs)(s.p,{children:["Complex components such as ",(0,t.jsx)(s.strong,{children:"modals"})," must trap focus correctly and handle escape key behavior. ",(0,t.jsx)(s.strong,{children:"Checkboxes"})," must behave like their native equivalents, including keyboard toggling and proper labeling. ",(0,t.jsx)(s.strong,{children:"Forms"})," must use real ",(0,t.jsx)(s.code,{children:"<label>"})," elements rather than placeholders. These expectations ensure that every contribution produces a ",(0,t.jsx)(s.strong,{children:"usable and inclusive experience"})," for all."]})}),"\n",(0,t.jsx)(o.FC,{title:"System Impact: Moderate",level:"Medium",explanation:"Focus management and unlabeled controls are among the most common reasons components fail accessibility review.",affectedAreas:["Buttons","Form Inputs","Tooltips","Modals"]}),"\n",(0,t.jsx)(o.gU,{children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Figure 3."})," The impact meter shows common accessibility pitfalls and the component types most frequently affected by them."]})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"recap-and-whats-next",children:"Recap and What\u2019s Next"}),"\n",(0,t.jsx)(o.Nx,{children:(0,t.jsxs)(s.p,{children:["Accessibility in Cumulus is ",(0,t.jsx)(s.strong,{children:"built in"}),", not bolted on. It lives in tokens, in development patterns, and in every review checklist. By ensuring that your components meet these requirements, you are not only meeting compliance guidelines, you are ",(0,t.jsx)(s.strong,{children:"enhancing usability, trust, and inclusivity"})," for all users."]})}),"\n",(0,t.jsx)(o.Ow,{children:(0,t.jsxs)(s.p,{children:["But accessibility is only one part of contribution quality. Equally important are the ",(0,t.jsx)(s.strong,{children:"style rules"})," that govern how we write, structure, and present our components. Consistent language, predictable structure, and clear tone ensure that the documentation itself is as accessible as the components it describes. These rules build a shared voice across the system."]})}),"\n",(0,t.jsx)(o.Nx,{children:(0,t.jsxs)(s.p,{children:["Next, you will explore those ",(0,t.jsx)(s.strong,{children:"style rules"}),". You will learn how to write documentation that is clear, scalable, and aligned with the system\u2019s principles. When combined with accessibility best practices, these rules make every contribution not only functional and inclusive, but ",(0,t.jsx)(s.strong,{children:"coherent and easy to adopt"}),"."]})}),"\n",(0,t.jsx)(o.Ow,{children:(0,t.jsxs)(s.p,{children:["By mastering accessibility and understanding style governance, you are now ready to step into the next layer of the knowledge base: the guidelines that shape ",(0,t.jsx)(s.strong,{children:"how we communicate"})," our design system. Let\u2019s move forward and ensure your contributions are both ",(0,t.jsx)(s.strong,{children:"accessible and consistently expressed"}),"."]})})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);